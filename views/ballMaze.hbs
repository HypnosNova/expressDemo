<html>

	<head>
		<meta charset="UTF-8" />
		<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" name="viewport" />

		<style>
			body {
				background: black;
				margin: 0;
				padding: 0;
				font-family: 'Helvetica';
			}
			
			#instructions {
				background-color: rgba(0, 0, 0, 0.75);
				color: white;
				text-align: center;
				padding: 32px;
				margin: 0px;
				display: inline;
				border: 2px solid white;
				pointer-events: none;
			}
			
			#help {
				position: absolute;
				left: 0px;
				bottom: 0px;
				padding: 4px;
				color: white;
				pointer-events: none;
			}
			
			#level {
				position: absolute;
				left: 0px;
				top: 0px;
				padding: 4px;
				color: yellow;
				font-weight: bold;
				pointer-events: none;
			}
		</style>

	</head>

	<body>

<!--		<div id='instructions'>
			如何玩：
			<br><br> 使用方向键或A、S、D、W控制小球移动并找到迷宫出口。
			<br><br> 你可以从
			<a href="https://github.com/wwwtyro/Astray" target="_blank">https://github.com/wwwtyro/Astray</a>下载源码。
		</div>

		<div id='help'>
			长按'I'键显示操作说明
		</div>-->

		<div id='level'>
			Level 1
		</div>
		<div style="position: fixed;width: 100%;height: 100%;" id="aaaa">
			<div id="upBtn" style="height: 20%;width: 100%;float: left;background-color: rgba(0,0,0,0);"></div>
			<div id="leftBtn" style="height: 60%;width: 50%;float: left;background-color: rgba(0,0,255,0);"></div>
			<div id="rightBtn" style="height: 60%;width: 50%;float: left;background-color: rgba(0,255,0,0);"></div>
			<div id="downBtn" style="height: 20%;width: 100%;float: left;background-color: rgba(0,0,0,0);"></div>
		</div>
	</body>
	<script src='js/Box2dWeb.min.js'></script>
	<script src="js/jquery.js"></script>
	<script src="js/keyboard.js"></script>
	<script src="js/maze.js"></script>
	<script src="js/Three.js"></script>
	<script src="js/jquery.qrcode.min.js"></script>
	<script>
		var camera = undefined,
			scene = undefined,
			renderer = undefined,
			light = undefined,
			mouseX = undefined,
			mouseY = undefined,
			maze = undefined,
			mazeMesh = undefined,
			mazeDimension = 11,
			planeMesh = undefined,
			ballMesh = undefined,
			ballRadius = 0.25,
			keyAxis = [0, 0],
			ironTexture = THREE.ImageUtils.loadTexture('img/ball.png'),
			planeTexture = THREE.ImageUtils.loadTexture('img/concrete.png'),
			brickTexture = THREE.ImageUtils.loadTexture('img/brick.png'),
			gameState = undefined,
			// Box2D shortcuts
			b2World = Box2D.Dynamics.b2World,
			b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
			b2BodyDef = Box2D.Dynamics.b2BodyDef,
			b2Body = Box2D.Dynamics.b2Body,
			b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
			b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
			b2Settings = Box2D.Common.b2Settings,
			b2Vec2 = Box2D.Common.Math.b2Vec2,
			// Box2D world variables 
			wWorld = undefined,
			wBall = undefined;

		function createPhysicsWorld() {
			// Create the world object.
			wWorld = new b2World(new b2Vec2(0, 0), true);
			// Create the ball.
			var bodyDef = new b2BodyDef();
			bodyDef.type = b2Body.b2_dynamicBody;
			bodyDef.position.Set(1, 1);
			wBall = wWorld.CreateBody(bodyDef);
			var fixDef = new b2FixtureDef();
			fixDef.density = 1.0;
			fixDef.friction = 0.0;
			fixDef.restitution = 0.25;
			fixDef.shape = new b2CircleShape(ballRadius);
			wBall.CreateFixture(fixDef);
			// Create the maze.
			bodyDef.type = b2Body.b2_staticBody;
			fixDef.shape = new b2PolygonShape();
			fixDef.shape.SetAsBox(0.5, 0.5);
			for (var i = 0; i < maze.dimension; i++) {
				for (var j = 0; j < maze.dimension; j++) {
					if (maze[i][j]) {
						bodyDef.position.x = i;
						bodyDef.position.y = j;
						wWorld.CreateBody(bodyDef).CreateFixture(fixDef);
					}
				}
			}
		}

		function generate_maze_mesh(field) {
			var dummy = new THREE.Geometry();
			for (var i = 0; i < field.dimension; i++) {
				for (var j = 0; j < field.dimension; j++) {
					if (field[i][j]) {
						var geometry = new THREE.CubeGeometry(1, 1, 1, 1, 1, 1);
						var mesh_ij = new THREE.Mesh(geometry);
						mesh_ij.position.x = i;
						mesh_ij.position.y = j;
						mesh_ij.position.z = 0.5;
						THREE.GeometryUtils.merge(dummy, mesh_ij);
					}
				}
			}
			var material = new THREE.MeshPhongMaterial({
				map: brickTexture
			});
			var mesh = new THREE.Mesh(dummy, material)
			return mesh;
		}

		function createRenderWorld() {
			// Create the scene object.
			scene = new THREE.Scene();
			// Add the light.
			light = new THREE.PointLight(0xffffff, 1);
			light.position.set(1, 1, 1.3);
			scene.add(light);
			// Add the ball.
			g = new THREE.SphereGeometry(ballRadius, 32, 16);
			m = new THREE.MeshPhongMaterial({
				map: ironTexture
			});
			ballMesh = new THREE.Mesh(g, m);
			ballMesh.position.set(1, 1, ballRadius);
			scene.add(ballMesh);
			// Add the camera.
			var aspect = window.innerWidth / window.innerHeight;
			camera = new THREE.PerspectiveCamera(60, aspect, 1, 1000);
			camera.position.set(1, 1, 5);
			scene.add(camera);
			// Add the maze.
			mazeMesh = generate_maze_mesh(maze);
			scene.add(mazeMesh);
			// Add the ground.
			g = new THREE.PlaneGeometry(mazeDimension * 10, mazeDimension * 10, mazeDimension, mazeDimension);
			planeTexture.wrapS = planeTexture.wrapT = THREE.RepeatWrapping;
			planeTexture.repeat.set(mazeDimension * 5, mazeDimension * 5);
			m = new THREE.MeshPhongMaterial({
				map: planeTexture
			});
			planeMesh = new THREE.Mesh(g, m);
			planeMesh.position.set((mazeDimension - 1) / 2, (mazeDimension - 1) / 2, 0);
			planeMesh.rotation.set(Math.PI / 2, 0, 0);
			scene.add(planeMesh);
		}

		function updatePhysicsWorld() {
			// Apply "friction". 
			var lv = wBall.GetLinearVelocity();
			lv.Multiply(0.95);
			wBall.SetLinearVelocity(lv);
			// Apply user-directed force.
			var f = new b2Vec2(keyAxis[0] * wBall.GetMass() * 0.25, keyAxis[1] * wBall.GetMass() * 0.25);
			wBall.ApplyImpulse(f, wBall.GetPosition());
			//keyAxis = [0, 0];
			// Take a time step.
			wWorld.Step(1 / 60, 8, 3);
		}

		function updateRenderWorld() {
			// Update ball position.
			var stepX = wBall.GetPosition().x - ballMesh.position.x;
			var stepY = wBall.GetPosition().y - ballMesh.position.y;
			ballMesh.position.x += stepX;
			ballMesh.position.y += stepY;
			// Update ball rotation.
			var tempMat = new THREE.Matrix4();
			tempMat.makeRotationAxis(new THREE.Vector3(0, 1, 0), stepX / ballRadius);
			tempMat.multiplySelf(ballMesh.matrix);
			ballMesh.matrix = tempMat;
			tempMat = new THREE.Matrix4();
			tempMat.makeRotationAxis(new THREE.Vector3(1, 0, 0), -stepY / ballRadius);
			tempMat.multiplySelf(ballMesh.matrix);
			ballMesh.matrix = tempMat;
			ballMesh.rotation.getRotationFromMatrix(ballMesh.matrix);
			// Update camera and light positions.
			camera.position.x += (ballMesh.position.x - camera.position.x) * 0.1;
			camera.position.y += (ballMesh.position.y - camera.position.y) * 0.1;
			camera.position.z += (5 - camera.position.z) * 0.1;
			light.position.x = camera.position.x;
			light.position.y = camera.position.y;
			light.position.z = camera.position.z - 3.0;
		}

		function gameLoop() {
			switch (gameState) {
				case 'initialize':
					maze = generateSquareMaze(mazeDimension);
					maze[mazeDimension - 1][mazeDimension - 2] = false;
					createPhysicsWorld();
					createRenderWorld();
					camera.position.set(1, 1, 5);
					light.position.set(1, 1, 1.3);
					light.intensity = 0;
					var level = Math.floor((mazeDimension - 1) / 2 - 4);
					$('#level').html('Level ' + level);
					gameState = 'fade in';
					break;
				case 'fade in':
					light.intensity += 0.1 * (1.0 - light.intensity);
					renderer.render(scene, camera);
					if (Math.abs(light.intensity - 1.0) < 0.05) {
						light.intensity = 1.0;
						gameState = 'play'
					}
					break;
				case 'play':
					updatePhysicsWorld();
					updateRenderWorld();
					renderer.render(scene, camera);
					// Check for victory.
					var mazeX = Math.floor(ballMesh.position.x + 0.5);
					var mazeY = Math.floor(ballMesh.position.y + 0.5);
					if (mazeX == mazeDimension && mazeY == mazeDimension - 2) {
						mazeDimension += 2;
						gameState = 'fade out';
					}
					break;
				case 'fade out':
					updatePhysicsWorld();
					updateRenderWorld();
					light.intensity += 0.1 * (0.0 - light.intensity);
					renderer.render(scene, camera);
					if (Math.abs(light.intensity - 0.0) < 0.1) {
						light.intensity = 0.0;
						renderer.render(scene, camera);
						gameState = 'initialize'
					}
					break;
			}
			requestAnimationFrame(gameLoop);
		}

		function onResize() {
			renderer.setSize(window.innerWidth, window.innerHeight);
			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();
		}

		function onMoveKey(axis) {
			//console.log(axis)
			keyAxis = axis.slice(0);
		}
		$("#rightBtn").bind("touchstart", function() {
			keyAxis = [1, 0].slice(0);
		}).bind("mousedown", function() {
			keyAxis = [1, 0].slice(0);
		})
		$("#leftBtn").bind("touchstart", function() {
			keyAxis = [-1, 0].slice(0);
		}).bind("mousedown", function() {
			keyAxis = [-1, 0].slice(0);
		})
		$("#upBtn").bind("touchstart", function() {
			keyAxis = [0, 1].slice(0);
		}).bind("mousedown", function() {
			keyAxis = [0, 1].slice(0);
		})
		$("#downBtn").bind("touchstart", function() {
			keyAxis = [0, -1].slice(0);
		}).bind("mousedown", function() {
			keyAxis = [0, -1].slice(0);
		})
		
		$("#rightBtn").bind("touchend", function() {
			keyAxis = [0, 0].slice(0);
		}).bind("mouseup", function() {
			keyAxis = [0, 0].slice(0);
		})
		$("#leftBtn").bind("touchend", function() {
			keyAxis = [0, 0].slice(0);
		}).bind("mouseup", function() {
			keyAxis = [0, 0].slice(0);
		})
		$("#upBtn").bind("touchend", function() {
			keyAxis = [0, 0].slice(0);
		}).bind("mouseup", function() {
			keyAxis = [0, 0].slice(0);
		})
		$("#downBtn").bind("touchend", function() {
			keyAxis = [0, 0].slice(0);
		}).bind("mouseup", function() {
			keyAxis = [0, 0].slice(0);
		})
		
		jQuery.fn.centerv = function() {
			wh = window.innerHeight;
			h = this.outerHeight();
			this.css("position", "absolute");
			this.css("top", Math.max(0, (wh - h) / 2) + "px");
			return this;
		}
		jQuery.fn.centerh = function() {
			ww = window.innerWidth;
			w = this.outerWidth();
			this.css("position", "absolute");
			this.css("left", Math.max(0, (ww - w) / 2) + "px");
			return this;
		}
		jQuery.fn.center = function() {
			this.centerv();
			this.centerh();
			return this;
		}
		$(document).ready(function() {
			// Prepare the instructions.
			$('#instructions').center();
			$('#instructions').hide();
			KeyboardJS.bind.key('i', function() {
					$('#instructions').show()
				},
				function() {
					$('#instructions').hide()
				});
			// Create the renderer.
			renderer = new THREE.WebGLRenderer();
			renderer.setSize(window.innerWidth, window.innerHeight);
			document.body.appendChild(renderer.domElement);
			// Bind keyboard and resize events.
			KeyboardJS.bind.axis('left', 'right', 'down', 'up', onMoveKey);
			KeyboardJS.bind.axis('a', 'd', 's', 'w', onMoveKey);
			$(window).resize(onResize);
			// Set the initial game state.
			gameState = 'initialize';
			// Start the game loop.
			requestAnimationFrame(gameLoop);
		})
	</script>
	<script src="js/socket.io.min.js"></script>
	<script type="text/javascript">
		var isControl=false;
		var socket = io();
		$('form').submit(function() {
			socket.emit('chat message', $('#m').val());
			$('#m').val('');
			return false;
		});
		socket.on('chat message', function(msg) {
			//$('#messages').append($('<li>').text(msg));
		});
		socket.on('Hello', function(msg) {
			console.log(msg)
			var qrDiv=document.createElement("div");
			$(qrDiv).css({"background":"white","width":"512px","height":"512px","position":"fixed","margin":"-276px -276px","top":"50%","left":"50%","padding":"20px"});
			$(document.body).append(qrDiv);
			$(qrDiv).attr("id","qrcode")
			$(qrDiv).bind("click",function(){$("#qrcode").remove();})
			var urlStr=location.href.split("/");
			
			$("#qrcode").qrcode({width: 512,height: 512,text: urlStr[0]+"//"+urlStr[2]+"/users/controller?id="+msg});
		});
		socket.on('control', function(msg) {
			var tmp=msg.split("=");
			if(!isControl){
				isControl=tmp[2];
			}
			if(isControl!=tmp[2]){
				return;
			}
			$("#qrcode").remove();
			if(tmp[1]=="start"){
				if(tmp[0]=="up"){
					keyAxis = [0, 1].slice(0);
				}else if(tmp[0]=="right"){
					keyAxis = [1, 0].slice(0);
				}else if(tmp[0]=="down"){
					keyAxis = [0, -1].slice(0);
				}else if(tmp[0]=="left"){
					keyAxis = [-1, 0].slice(0);
				} 
			}else {
				keyAxis = [0, 0].slice(0); 
			}
		});
	</script>
</html>